@page "/games/{Id:int}"
@using Puissance4.DTOs
@inject GameService GameService
@inject NavigationManager NavigationManager
@inject AuthService AuthService

@attribute [Authorize]

<PageTitle>Blaze 4</PageTitle>

<div class="container">
    <main class="content">
        <!-- Title -->
        <h1 class="title">Game @Id</h1>

        <!-- Game Board -->
        @if (game != null)
        {
            <div class="game-info">
                <p><strong>Game ID:</strong> @game.Id</p>
                <p><strong>You are:</strong> @user?.Login</p>
                <p><strong>Host:</strong> @game.Host.Login</p>
                <p><strong>Guest:</strong> @(game.Guest?.Login ?? "Waiting for player")</p>
                <p><strong>Current Turn:</strong> @game.CurrentTurn?.Login</p>
                <p><strong>Status:</strong> @game.Status</p>
            </div>

            <div class="game-board-container">
                <!-- Column Indicators -->
                <div class="column-indicators">
                    @for (var col = 0; col < game.Grid.Columns; col++)
                    {
                        <div class="indicator" @onclick="@(() => PlaceToken(col))">▼</div>
                    }
                </div>

                <!-- Game Board -->
                <!-- Game Board -->
                <div class="game-board">
                    @for (var row = 0; row < game.Grid.Rows; row++)
                    {
                        <div class="row">
                            @for (var col = 0; col < game.Grid.Columns; col++)
                            {
                                var currentRow = row;
                                var currentCol = col;
                                var cell = game.Grid.Cells.FirstOrDefault(c => c.Row == currentRow && c.Column == currentCol);
                                var tokenColorClass = cell?.TokenColor?.ToLower(); // Ex : "red", "yellow", ou null pour aucune couleur

                                <div class="cell @(tokenColorClass)" @onclick="@(() => PlaceToken(currentCol))">
                                </div>
                            }
                        </div>
                    }
                </div>

            </div>

            @if (errorMessage != null)
            {
                <p style="color: red;">@errorMessage</p>
            }
        }
        else
        {
            <p><em>Loading game...</em></p>
        }
    </main>
</div>


@code {
    [Parameter] public int Id { get; set; }

    private GameDto? game;
    private string? errorMessage;
    private PlayerDto? user;
    private CancellationTokenSource? refreshTokenSource;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch the game details from the API
            game = await GameService.GetGameByIdAsync(Id);

            var login = await AuthService.GetClaimAsync("sub") as string;
            user = game?.Host.Login == login ? game?.Host : game?.Guest;

            errorMessage = null;

            // Start automatic refresh
            StartGameRefresh();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading game: {ex.Message}";
        }
    }

    private async Task PlaceToken(int column)
    {
        if (game == null || game.Status != "In Progress")
        {
            errorMessage = "Cannot play. The game is not in progress.";
            return;
        }

        try
        {
            var success = await GameService.PlayMoveAsync(Id, column);

            if (success)
            {
                game = await GameService.GetGameByIdAsync(Id);
                errorMessage = null;
                StateHasChanged();
            }
            else
            {
                errorMessage = "Failed to place token. Try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error placing token: {ex.Message}";
        }
    }

    private void StartGameRefresh()
    {
        // Annule les rafraîchissements précédents si existants
        refreshTokenSource?.Cancel();
        refreshTokenSource = new CancellationTokenSource();

        // Lance une tâche de rafraîchissement
        _ = Task.Run(async () =>
        {
            while (game?.Status == "In Progress" && !refreshTokenSource.Token.IsCancellationRequested)
            {
                try
                {
                    await Task.Delay(400, refreshTokenSource.Token);

                    // Vérifie que la tâche n'a pas été annulée avant de continuer
                    if (!refreshTokenSource.Token.IsCancellationRequested)
                    {
                        game = await GameService.GetGameByIdAsync(Id);
                        StateHasChanged();
                    }
                }
                catch (TaskCanceledException)
                {
                    // Ignore l'annulation prévue
                }
                catch (Exception ex)
                {
                    errorMessage = $"Error refreshing game state: {ex.Message}";
                    StateHasChanged();
                }
            }
        }, refreshTokenSource.Token);
    }

    protected override void OnParametersSet()
    {
        // Redémarre la tâche de rafraîchissement si les paramètres changent
        StartGameRefresh();
    }

    public void Dispose()
    {
        // Annule les tâches en cours lorsque l'utilisateur quitte la page
        refreshTokenSource?.Cancel();
    }
}
