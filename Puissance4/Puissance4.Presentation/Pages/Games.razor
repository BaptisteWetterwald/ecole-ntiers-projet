@page "/games"
@using Puissance4.DTOs
@attribute [Authorize]
@inject GameService GameService
@inject PlayerService PlayerService
@inject NavigationManager NavigationManager

<PageTitle>Games</PageTitle>

<h1>Games</h1>

<p>This component displays a list of ongoing Connect Four games.</p>

<h2>Games waiting for players</h2>
@if (pendingGames == null)
{
    <p><em>Loading...</em></p>
}
else if (!pendingGames.Any())
{
    <p>No games available.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Game ID</th>
            <th>Hosted by</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var game in pendingGames)
        {
            <tr>
                <td>@game.Id</td>
                <td>@game.Host.Login</td>
                <td>
                    <button class="btn btn-primary btn-sm" @onclick="() => JoinGame(game.Id)">Join</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<h2>Your Games</h2>
@if (userGames == null)
{
    <p><em>Loading...</em></p>
}
else if (!userGames.Any())
{
    <p>You are not in any games currently.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Game ID</th>
            <th>Host</th>
            <th>Guest</th>
            <th>Status</th>
            <th>Current player</th>
            <th>Action</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var game in userGames)
        {
            <tr>
                <td>@game.Id</td>
                <td>@game.Host.Login</td>
                <td>@(game.Guest?.Login ?? "Waiting for player")</td>
                <td>@game.Status</td>
                <td>@(game.CurrentTurn?.Login ?? "N/A")</td>
                <td>
                    <button class="btn btn-primary btn-sm" @onclick="() => NavigateToGame(game.Id)">Play</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

<div class="mt-3">
    <button class="btn btn-primary" @onclick="CreateGame">Create New Game</button>
</div>

@code {
    private List<GameDto> pendingGames;
    private List<GameDto> userGames;
    private int playerId;

    protected override async Task OnInitializedAsync()
    {
        pendingGames = await GameService.GetPendingGamesAsync();
        playerId = await PlayerService.GetPlayerIdAsync();
        Console.WriteLine("playerId: " + playerId);
        // remove the games where the user is the host
        pendingGames = pendingGames.Where(g => g.Host.Id != playerId).ToList();
        userGames = await GameService.GetGamesOfPlayerAsync();
    }

    private void NavigateToGame(int gameId)
    {
        // Navigate to the game page with the game ID as a query parameter
        NavigationManager.NavigateTo($"/games/{gameId}");
    }

    private async Task CreateGame()
    {
        var created = await GameService.CreateGameAsync();
        if (created)
        {
            pendingGames = await GameService.GetPendingGamesAsync();
            pendingGames = pendingGames.Where(g => g.Host.Id != playerId).ToList();

            userGames = await GameService.GetGamesOfPlayerAsync();
        }
    }

    // JoinGame()
    private async Task JoinGame(int gameId)
    {
        var joined = await GameService.JoinGameAsync(gameId);
        if (joined)
        {
            pendingGames = await GameService.GetPendingGamesAsync();
            pendingGames = pendingGames.Where(g => g.Host.Id != playerId).ToList();

            userGames = await GameService.GetGamesOfPlayerAsync();
            
            // Reload the page to update the list of games
            StateHasChanged();
        }
    }

}
